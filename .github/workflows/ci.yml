name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  # Go 项目测试 (Core & CLI)
  test-go:
    name: Test Go Projects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [core, cli]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.project }}-${{ hashFiles(format('{0}/go.sum', matrix.project)) }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.project }}-

    - name: Download dependencies
      working-directory: ${{ matrix.project }}
      run: go mod download

    - name: Run tests
      working-directory: ${{ matrix.project }}
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      working-directory: ${{ matrix.project }}
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.project }}/coverage.out
        flags: ${{ matrix.project }}
        name: ${{ matrix.project }}-coverage

  # 代码质量检查
  lint-go:
    name: Lint Go Code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [core, cli]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: ${{ matrix.project }}
        args: --timeout=5m

  # 构建 Go 项目
  build-go:
    name: Build Go Projects
    runs-on: ubuntu-latest
    needs: [test-go, lint-go]
    strategy:
      matrix:
        project: [core, cli]
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      working-directory: ${{ matrix.project }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "${{ matrix.project }}" = "core" ]; then
          go build -ldflags "-w -s" -o ../dist/prism-core-${{ matrix.goos }}-${{ matrix.goarch }} cmd/prism-core/main.go
        else
          go build -ldflags "-w -s" -o ../dist/prism-cli-${{ matrix.goos }}-${{ matrix.goarch }} main.go
        fi

    - name: Add .exe extension for Windows
      if: matrix.goos == 'windows'
      working-directory: dist
      run: |
        if [ "${{ matrix.project }}" = "core" ]; then
          mv prism-core-${{ matrix.goos }}-${{ matrix.goarch }} prism-core-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        else
          mv prism-cli-${{ matrix.goos }}-${{ matrix.goarch }} prism-cli-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.project }}-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  # 桌面客户端测试
  test-desktop:
    name: Test Desktop Client
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Install dependencies
      working-directory: desktop
      run: npm ci

    - name: Run tests
      working-directory: desktop
      run: npm test

    - name: Lint code
      working-directory: desktop
      run: npm run lint

  # 构建桌面客户端
  build-desktop:
    name: Build Desktop Client
    runs-on: ${{ matrix.os }}
    needs: test-desktop
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Install dependencies
      working-directory: desktop
      run: npm ci

    - name: Build application
      working-directory: desktop
      run: npm run tauri build

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-${{ matrix.os }}
        path: |
          desktop/src-tauri/target/release/bundle/

  # Docker 构建测试
  test-docker:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: test-go

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./core
        file: ./core/Dockerfile
        push: false
        tags: prism/core:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name prism-test -p 9090:9090 prism/core:test
        sleep 10
        curl -f http://localhost:9090/api/v1/health || exit 1
        docker stop prism-test

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 依赖检查
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3