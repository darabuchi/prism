name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  RUST_VERSION: 'stable'

jobs:
  # ÂàõÂª∫ GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # ÁîüÊàêÂèòÊõ¥Êó•Âøó
        if [ -n "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%an)" $PREVIOUS_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%an)" HEAD)
        fi
        
        # ‰øùÂ≠òÂà∞ÁéØÂ¢ÉÂèòÈáè
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## üöÄ Release ${{ github.ref_name }}
          
          ### üìã Changes
          ${{ env.CHANGELOG }}
          
          ### üì¶ Downloads
          
          #### Core & CLI
          - Linux (amd64): `prism-core-linux-amd64`, `prism-cli-linux-amd64`
          - Linux (arm64): `prism-core-linux-arm64`, `prism-cli-linux-arm64`
          - macOS (amd64): `prism-core-darwin-amd64`, `prism-cli-darwin-amd64`
          - macOS (arm64): `prism-core-darwin-arm64`, `prism-cli-darwin-arm64`
          - Windows (amd64): `prism-core-windows-amd64.exe`, `prism-cli-windows-amd64.exe`
          
          #### Desktop Client
          - macOS: `.dmg` installer
          - Windows: `.msi` installer
          - Linux: `.AppImage` or `.deb` package
          
          ### üìã Installation
          
          #### Docker
          ```bash
          docker pull ghcr.io/prism/core:${{ github.ref_name }}
          ```
          
          #### Homebrew (macOS/Linux)
          ```bash
          brew install prism/tap/prism
          ```
          
          #### Manual Installation
          1. Download the appropriate binary for your platform
          2. Extract and place in your PATH
          3. Run `prism --help` to get started
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # ÊûÑÂª∫ÂíåÂèëÂ∏É Go ‰∫åËøõÂà∂Êñá‰ª∂
  build-go-release:
    name: Build Go Release
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        project: [core, cli]
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      working-directory: ${{ matrix.project }}
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ github.ref_name }}
        BUILD_TIME: ${{ github.run_id }}
        GIT_COMMIT: ${{ github.sha }}
      run: |
        mkdir -p ../dist
        if [ "${{ matrix.project }}" = "core" ]; then
          go build \
            -ldflags "-w -s -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT}" \
            -o ../dist/prism-core-${{ matrix.goos }}-${{ matrix.goarch }} \
            cmd/prism-core/main.go
        else
          go build \
            -ldflags "-w -s -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.gitCommit=${GIT_COMMIT}" \
            -o ../dist/prism-cli-${{ matrix.goos }}-${{ matrix.goarch }} \
            main.go
        fi

    - name: Add .exe extension for Windows
      if: matrix.goos == 'windows'
      working-directory: dist
      run: |
        if [ "${{ matrix.project }}" = "core" ]; then
          mv prism-core-${{ matrix.goos }}-${{ matrix.goarch }} prism-core-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        else
          mv prism-cli-${{ matrix.goos }}-${{ matrix.goarch }} prism-cli-${{ matrix.goos }}-${{ matrix.goarch }}.exe
        fi

    - name: Compress binary
      working-directory: dist
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          if [ "${{ matrix.project }}" = "core" ]; then
            zip prism-core-${{ matrix.goos }}-${{ matrix.goarch }}.zip prism-core-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          else
            zip prism-cli-${{ matrix.goos }}-${{ matrix.goarch }}.zip prism-cli-${{ matrix.goos }}-${{ matrix.goarch }}.exe
          fi
        else
          if [ "${{ matrix.project }}" = "core" ]; then
            tar -czf prism-core-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz prism-core-${{ matrix.goos }}-${{ matrix.goarch }}
          else
            tar -czf prism-cli-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz prism-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          fi
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: |
          ${{ matrix.goos == 'windows' && format('dist/prism-{0}-{1}-{2}.zip', matrix.project, matrix.goos, matrix.goarch) || format('dist/prism-{0}-{1}-{2}.tar.gz', matrix.project, matrix.goos, matrix.goarch) }}
        asset_name: |
          ${{ matrix.goos == 'windows' && format('prism-{0}-{1}-{2}.zip', matrix.project, matrix.goos, matrix.goarch) || format('prism-{0}-{1}-{2}.tar.gz', matrix.project, matrix.goos, matrix.goarch) }}
        asset_content_type: |
          ${{ matrix.goos == 'windows' && 'application/zip' || 'application/gzip' }}

  # ÊûÑÂª∫ÂíåÂèëÂ∏ÉÊ°åÈù¢ÂÆ¢Êà∑Á´Ø
  build-desktop-release:
    name: Build Desktop Release
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: desktop/package-lock.json

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        override: true

    - name: Install system dependencies (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt update
        sudo apt install -y libwebkit2gtk-4.0-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

    - name: Install dependencies
      working-directory: desktop
      run: npm ci

    - name: Build application
      working-directory: desktop
      env:
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      run: npm run tauri build

    - name: Upload Release Assets (macOS)
      if: matrix.platform == 'macos'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: desktop/src-tauri/target/release/bundle/dmg/Prism_*.dmg
        asset_name: Prism-${{ github.ref_name }}-macos.dmg
        asset_content_type: application/octet-stream

    - name: Upload Release Assets (Windows)
      if: matrix.platform == 'windows'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: desktop/src-tauri/target/release/bundle/msi/Prism_*.msi
        asset_name: Prism-${{ github.ref_name }}-windows.msi
        asset_content_type: application/octet-stream

    - name: Upload Release Assets (Linux AppImage)
      if: matrix.platform == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: desktop/src-tauri/target/release/bundle/appimage/prism_*.AppImage
        asset_name: Prism-${{ github.ref_name }}-linux.AppImage
        asset_content_type: application/octet-stream

    - name: Upload Release Assets (Linux DEB)
      if: matrix.platform == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: desktop/src-tauri/target/release/bundle/deb/prism_*.deb
        asset_name: Prism-${{ github.ref_name }}-linux.deb
        asset_content_type: application/vnd.debian.binary-package

  # ÊûÑÂª∫ÂíåÊé®ÈÄÅ Docker ÈïúÂÉè
  build-docker-release:
    name: Build Docker Release
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/prism-core
        tags: |
          type=ref,event=tag
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./core
        file: ./core/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max